// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// FieldMask defines model for FieldMask.
type FieldMask struct {
	Paths *[]string `json:"paths,omitempty"`
}

// PagingMetadata defines model for PagingMetadata.
type PagingMetadata struct {
	PageNumber *int64 `json:"pageNumber,omitempty"`
	PageSize   *int64 `json:"pageSize,omitempty"`
	Total      *int64 `json:"total,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	Created     *time.Time `json:"created,omitempty"`
	Deleted     *time.Time `json:"deleted,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	OwnerId     *string    `json:"ownerId,omitempty"`
	PolicyId    *string    `json:"policyId,omitempty"`
	Updated     *time.Time `json:"updated,omitempty"`
}

// Resources defines model for Resources.
type Resources = []Resource

// ListParams defines parameters for List.
type ListParams struct {
	// PageNumber page number of the list request
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize limit of number of results fetched from the list request
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// UpdateByIdJSONBody defines parameters for UpdateById.
type UpdateByIdJSONBody struct {
	Data      *Resource  `json:"data,omitempty"`
	FieldMask *FieldMask `json:"fieldMask,omitempty"`
}

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = Resource

// UpdateByIdJSONRequestBody defines body for UpdateById for application/json ContentType.
type UpdateByIdJSONRequestBody UpdateByIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all resources
	// (GET /resources)
	List(ctx echo.Context, params ListParams) error
	// Create a resource
	// (POST /resources)
	Create(ctx echo.Context) error
	// To delete a resource by id
	// (DELETE /resources/{resourceId})
	DeleteById(ctx echo.Context, resourceId string) error
	// fetch resource by its id
	// (GET /resources/{resourceId})
	GetById(ctx echo.Context, resourceId string) error
	// To update a resource by id
	// (PUT /resources/{resourceId})
	UpdateById(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Create(ctx)
	return err
}

// DeleteById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteById(ctx, resourceId)
	return err
}

// GetById converts echo context to params.
func (w *ServerInterfaceWrapper) GetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetById(ctx, resourceId)
	return err
}

// UpdateById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateById(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/resources", wrapper.List)
	router.POST(baseURL+"/resources", wrapper.Create)
	router.DELETE(baseURL+"/resources/:resourceId", wrapper.DeleteById)
	router.GET(baseURL+"/resources/:resourceId", wrapper.GetById)
	router.PUT(baseURL+"/resources/:resourceId", wrapper.UpdateById)

}

type ListRequestObject struct {
	Params ListParams
}

type ListResponseObject interface {
	VisitListResponse(w http.ResponseWriter) error
}

type List200JSONResponse struct {
	Data           *Resources      `json:"data,omitempty"`
	PagingMetadata *PagingMetadata `json:"pagingMetadata,omitempty"`
}

func (response List200JSONResponse) VisitListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListdefaultJSONResponse) VisitListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateRequestObject struct {
	Body *CreateJSONRequestBody
}

type CreateResponseObject interface {
	VisitCreateResponse(w http.ResponseWriter) error
}

type Create201Response struct {
}

func (response Create201Response) VisitCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreatedefaultJSONResponse) VisitCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteByIdRequestObject struct {
	ResourceId string `json:"resourceId"`
}

type DeleteByIdResponseObject interface {
	VisitDeleteByIdResponse(w http.ResponseWriter) error
}

type DeleteById200Response struct {
}

func (response DeleteById200Response) VisitDeleteByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteByIddefaultJSONResponse) VisitDeleteByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetByIdRequestObject struct {
	ResourceId string `json:"resourceId"`
}

type GetByIdResponseObject interface {
	VisitGetByIdResponse(w http.ResponseWriter) error
}

type GetById200JSONResponse Resource

func (response GetById200JSONResponse) VisitGetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetByIddefaultJSONResponse) VisitGetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateByIdRequestObject struct {
	ResourceId string `json:"resourceId"`
	Body       *UpdateByIdJSONRequestBody
}

type UpdateByIdResponseObject interface {
	VisitUpdateByIdResponse(w http.ResponseWriter) error
}

type UpdateById200Response struct {
}

func (response UpdateById200Response) VisitUpdateByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateByIddefaultJSONResponse) VisitUpdateByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all resources
	// (GET /resources)
	List(ctx context.Context, request ListRequestObject) (ListResponseObject, error)
	// Create a resource
	// (POST /resources)
	Create(ctx context.Context, request CreateRequestObject) (CreateResponseObject, error)
	// To delete a resource by id
	// (DELETE /resources/{resourceId})
	DeleteById(ctx context.Context, request DeleteByIdRequestObject) (DeleteByIdResponseObject, error)
	// fetch resource by its id
	// (GET /resources/{resourceId})
	GetById(ctx context.Context, request GetByIdRequestObject) (GetByIdResponseObject, error)
	// To update a resource by id
	// (PUT /resources/{resourceId})
	UpdateById(ctx context.Context, request UpdateByIdRequestObject) (UpdateByIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// List operation middleware
func (sh *strictHandler) List(ctx echo.Context, params ListParams) error {
	var request ListRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.List(ctx.Request().Context(), request.(ListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "List")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListResponseObject); ok {
		return validResponse.VisitListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Create operation middleware
func (sh *strictHandler) Create(ctx echo.Context) error {
	var request CreateRequestObject

	var body CreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Create(ctx.Request().Context(), request.(CreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Create")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateResponseObject); ok {
		return validResponse.VisitCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteById operation middleware
func (sh *strictHandler) DeleteById(ctx echo.Context, resourceId string) error {
	var request DeleteByIdRequestObject

	request.ResourceId = resourceId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteById(ctx.Request().Context(), request.(DeleteByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteByIdResponseObject); ok {
		return validResponse.VisitDeleteByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetById operation middleware
func (sh *strictHandler) GetById(ctx echo.Context, resourceId string) error {
	var request GetByIdRequestObject

	request.ResourceId = resourceId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetById(ctx.Request().Context(), request.(GetByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetByIdResponseObject); ok {
		return validResponse.VisitGetByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateById operation middleware
func (sh *strictHandler) UpdateById(ctx echo.Context, resourceId string) error {
	var request UpdateByIdRequestObject

	request.ResourceId = resourceId

	var body UpdateByIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateById(ctx.Request().Context(), request.(UpdateByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateByIdResponseObject); ok {
		return validResponse.VisitUpdateByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
